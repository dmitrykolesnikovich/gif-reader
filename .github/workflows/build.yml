name: Build / CI / Deploy Snapshots

on:
  push:
    branches: [ master ]
    tags:
      - '!refs/tags/*'
  pull_request:
    branches: [ master ]

env:
  SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
  SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
  GPG_AUTHOR_PRIVATEKEY: ${{ secrets.GPG_AUTHOR_PRIVATEKEY }}
  GPG_AUTHOR_PASSPHRASE: ${{ secrets.GPG_AUTHOR_PASSPHRASE }}

jobs:
  build-project:
    name: 'Build (All)'
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        java: [ '11', '14', '15', '16' ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: ${{ matrix.java }}
          check-latest: true
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Output branch name
        run: echo ${{ steps.extract_branch.outputs.branch }}

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ env.GPG_AUTHOR_PRIVATEKEY }}
          passphrase: ${{ env.GPG_AUTHOR_PASSPHRASE }}
          git-user-signingkey: true
          git-commit-gpgsign: true

      - name: GPG user IDs
        run: |
          echo "fingerprint: ${{ steps.import_gpg.outputs.fingerprint }}"
          echo "keyid:       ${{ steps.import_gpg.outputs.keyid }}"
          echo "name:        ${{ steps.import_gpg.outputs.name }}"
          echo "email:       ${{ steps.import_gpg.outputs.email }}"

      - name: Build Java Project
        run: mvn install -P'release' -Dgpg.skip=true -Dlicense.skipUpdateLicense=true -DskipTests=true -Dmaven.javadoc.skip=true -B -V # --settings ./.github/scripts/settings.xml

      - name: Unit Tests
        run: mvn test

      - name: Integration Tests
        run: mvn verify

      - name: Deploy snapshots to Sonatype
        if: github.event_name != 'pull_request' && github.event_name != 'release'
        run: mvn deploy -P'deploy-sonatype' -Dmaven.antrun.skip=true -DskipTests=true -Dlicense.skipUpdateLicense=true -Dmaven.javadoc.skip=true # --settings ./.github/scripts/settings.xml
